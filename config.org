* Emacs initialization
** Package sources
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
* Start up
** Better defaults
#+BEGIN_SRC emacs-lisp
(setq-default
 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
 cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
 display-time-default-load-average nil            ; Don't display load average
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Prefers spaces over tabs
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 kill-ring-max 128                                ; Maximum length of kill ring
 load-prefer-newer t                              ; Prefers the newest version of a file
 mark-ring-max 128                                ; Maximum length of mark ring
 read-process-output-max (* 1024 1024)            ; Increase the amount of data reads from the process
 scroll-conservatively most-positive-fixnum       ; Always scroll by one line
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 tab-width 4                                      ; Set width for tabs
 use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
 user-full-name "greensponge"                     ; Set the full name of the current user
 user-mail-address "greensponge@gmail.com"        ; Set the email address of the current user
 vc-follow-symlinks t                             ; Always follow the symlinks
 view-read-only t)                                ; Always open read-only buffers in view-mode
(cd "~/")                                         ; Move to the user directory
(display-time-mode 1)                             ; Enable time in the mode-line
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
(show-paren-mode 1)                               ; Show the parent
#+END_SRC
* General settings
** Don't show startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Don't show toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

** Don't show scrollbar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

** Highlight line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC

** Delete selection
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** Split horizontally by default
#+BEGIN_SRC emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 0)
#+END_SRC

** Different backup directory
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.saves")))
#+END_SRC

** Display line numbers in programming files
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** Bookmarks
Set bookmarks file
#+BEGIN_SRC emacs-lisp
(setq bookmark-default-file "~/.emacs.d/bookmarks")
#+END_SRC

Save bookmarks when modified
#+BEGIN_SRC emacs-lisp
(setq bookmark-save-flag 1)
#+END_SRC
* UI
** Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-vibrant 'no-confirm))
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+END_SRC

** Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Source Code Pro Medium")
(set-fontset-font t 'latin "Noto Sans")
#+END_SRC

* Modes
** IDO
#+BEGIN_SRC emacs-lisp
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(ido-mode t)
#+END_SRC
** Org-mode
*** Org-bullets-mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** Shift select
#+BEGIN_SRC emacs-lisp
  (setq org-support-shift-select t)
#+END_SRC
*** Get things done
#+BEGIN_SRC emacs-lisp
  (setq org-tags-column 0)

  (global-set-key (kbd "<f5>") (lambda() (interactive)(find-file "~/.emacs.d/org-mode/org/notes.org")))
  (global-set-key (kbd "<f6>") (lambda() (interactive)(find-file "~/.emacs.d/org-mode/org/gtd.org")))
  (global-set-key (kbd "<f7>") (lambda() (interactive)(find-file "~/.emacs.d/org-mode/org/reports.org")))

  (setq org-agenda-files '("~/.emacs.d/org-mode/org/gtd.org"
                           "~/.emacs.d/org-mode/org/reports.org"))
  (setq org-refile-targets '(("~/.emacs.d/org-mode/org/gtd.org" :maxlevel . 3)
                             ("~/.emacs.d/org-mode/org/reports.org" :maxlevel . 2)))

  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC
* General packages
** Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	     :ensure t
	     :config(which-key-mode))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (progn
    (setq dashboard-items '((recents . 5)
			    (agenda . 5)
			    (projects . 5)
			    (bookmarks .5)))
    (setq dashboard-center-content nil)
    (setq dashboard-banner-logo-title "Wherever you go, there you are.")
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-startup-banner "~/.emacs.d/assets/images/emacs-logo.png")
    (setq show-week-agenda-p t)
    (setq dashboard-set-navigator t)
    (setq dashboard-navigator-buttons
	  `(
	    ((,nil
	      "config file"
	      "Open config file"
	      (lambda (&rest _) (find-file "~/.emacs.d/config.org"))
	      ))))
    )
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :bind
  (:map global-map
	([f8] . treemacs))
  :config
  (setq treemacs-show-hidden-files t)
  (setq treemacs-follow-mode t))
#+END_SRC
** Centaur tabs
#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
    :ensure t
    :config
    (setq centaur-tabs-set-bar 'under
          centaur-tabs-set-icons t
          centaur-tabs-height 32
          centaur-tabs-set-modified-marker t
          centaur-tabs-modified-marker "*"
          x-underline-at-descent-line t)
    (centaur-tabs-mode t))
#+END_SRC
* Advanced configuration
** Expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region 
  :ensure t
  :bind 
  ("C-+" . er/expand-region)
  ("C--" . er/contract-region))
#+END_SRC
** Auto-completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 0
          company-minimum-prefix-length 1
          company-selection-wrap-around 1
          company-tooltip-align-annotations 't)
    (company-tng-configure-default))
#+END_SRC
** Force config.org to refresh config.el file if changes are detected
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t)

  (defvar *config-file* (expand-file-name "config.org" user-emacs-directory)
    "The configuration file.")

  (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
    "Last modification time of the configuration file.")

  (defvar *show-async-tangle-results* nil
    "Keeps *emacs* async buffers around for later inspection.")

  (defun my/config-updated ()
    "Checks if the configuration file has been updated since the last time."
    (time-less-p *config-last-change*
                 (nth 5 (file-attributes *config-file*))))

  (defun my/config-tangle ()
    "Tangles the org file asynchronously."
    (when (my/config-updated)
      (setq *config-last-change*
            (nth 5 (file-attributes *config-file*)))
      (my/async-babel-tangle *config-file*)))

  (defun my/async-babel-tangle (org-file)
    "Tangles the org file asynchronously."
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,org-file))
       (unless *show-async-tangle-results*
         `(lambda (result)
            (if result
                (message "SUCCESS: %s successfully tangled (%.2fs)."
                         ,org-file
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: %s as tangle failed." ,org-file)))))))
#+END_SRC
** Buffers
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure t
    :bind ("C-x C-b" . ibuffer))

  (use-package ibuffer-projectile
    :after ibuffer
    :preface
    (defun my/ibuffer-projectile ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))
    :hook (ibuffer . my/ibuffer-projectile))

  (defvar *protected-buffers* '("*scratch*" "*Messages*")
    "Buffers that cannot be killed.")

  (defun my/protected-buffers ()
    "Protects some buffers from being killed."
    (dolist (buffer *protected-buffers*)
      (with-current-buffer buffer
        (emacs-lock-mode 'kill))))

  (add-hook 'after-init-hook #'my/protected-buffers)
#+END_SRC
