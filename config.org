* Emacs initialization
** Package sources
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
* General settings
** Don't show startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Don't show toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

** Don't show scrollbar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

** Highlight line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC

** Delete selection
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** Show matching parenthesis
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

** Split horizontally by default
#+BEGIN_SRC emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 0)
#+END_SRC

** Different backup directory
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.saves")))
#+END_SRC

** Display line numbers in programming files
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

* UI
** Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-vibrant 'no-confirm))
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+END_SRC

** Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC

* Modes
** IDO
#+BEGIN_SRC emacs-lisp
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(ido-mode t)
#+END_SRC

* General packages
** Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	     :ensure t
	     :config(which-key-mode))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (progn
    (setq dashboard-items '((recents . 5)
			    (agenda . 5)
			    (projects . 5)
			    (bookmarks .5)))
    (setq dashboard-center-content nil)
    (setq dashboard-banner-logo-title "Wherever you go, there you are.")
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-startup-banner "~/.emacs.d/banners/emacs-logo.png")
    (setq show-week-agenda-p t)
    (setq dashboard-set-navigator t)
    (setq dashboard-navigator-buttons
	  `(
	    ((,nil
	      "config file"
	      "Open config file"
	      (lambda (&rest _) (find-file "~/.emacs.d/config.org"))
	      ))))
    )
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :bind
  (:map global-map
	([f8] . treemacs))
  :config
  (setq treemacs-show-hidden-files t)
  (setq treemacs-follow-mode t))
#+END_SRC
