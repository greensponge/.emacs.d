#+PROPERTY: header-args :tangle yes
* Emacs initialization
** Package sources
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
* Configuration
** Basic
*** Better defaults
 #+BEGIN_SRC emacs-lisp
 (setq-default
  ad-redefinition-action 'accept                   ; Silence warnings for redefinition
  cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
  display-time-default-load-average nil            ; Don't display load average
  fill-column 80                                   ; Set width for automatic line breaks
  help-window-select t                             ; Focus new help windows when opened
  indent-tabs-mode nil                             ; Prefers spaces over tabs
  inhibit-startup-screen t                         ; Disable start-up screen
  initial-scratch-message ""                       ; Empty the initial *scratch* buffer
  kill-ring-max 128                                ; Maximum length of kill ring
  load-prefer-newer t                              ; Prefers the newest version of a file
  mark-ring-max 128                                ; Maximum length of mark ring
  read-process-output-max (* 1024 1024)            ; Increase the amount of data reads from the process
  scroll-conservatively most-positive-fixnum       ; Always scroll by one line
  select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
  tab-width 4                                      ; Set width for tabs
  use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
  user-full-name "greensponge"                     ; Set the full name of the current user
  user-mail-address "greensponge@gmail.com"        ; Set the email address of the current user
  vc-follow-symlinks t                             ; Always follow the symlinks
  view-read-only t)                                ; Always open read-only buffers in view-mode
 (cd "~/")                                         ; Move to the user directory
 (display-time-mode 1)                             ; Enable time in the mode-line
 (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
 (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
 (show-paren-mode 1)                               ; Show the parent
 (blink-cursor-mode 0)                             ; Stops cursor blinking
 #+END_SRC
*** Don't show startup message
 #+BEGIN_SRC emacs-lisp
 (setq inhibit-startup-message t)
 #+END_SRC
*** Don't show menubar
 #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
 #+END_SRC
*** Don't show toolbar
 #+BEGIN_SRC emacs-lisp
 (tool-bar-mode -1)
 #+END_SRC
*** Don't show scrollbar
 #+BEGIN_SRC emacs-lisp
 (scroll-bar-mode -1)
 #+END_SRC

*** Highlight line
 #+BEGIN_SRC emacs-lisp
 (global-hl-line-mode +1)
 #+END_SRC

*** Delete selection
 #+BEGIN_SRC emacs-lisp
 (delete-selection-mode 1)
 #+END_SRC

*** Split horizontally by default
 #+BEGIN_SRC emacs-lisp
 (setq split-height-threshold nil)
 (setq split-width-threshold 0)
 #+END_SRC

*** Different backup directory
 #+BEGIN_SRC emacs-lisp
 (setq backup-directory-alist '(("." . "~/.saves")))
 #+END_SRC

*** Display line numbers in programming files
 #+BEGIN_SRC emacs-lisp
 (add-hook 'prog-mode-hook 'display-line-numbers-mode)
 #+END_SRC

*** Bookmarks
 Set bookmarks file
 #+BEGIN_SRC emacs-lisp
 (setq bookmark-default-file "~/.emacs.d/bookmarks")
 #+END_SRC

 Save bookmarks when modified
 #+BEGIN_SRC emacs-lisp
 (setq bookmark-save-flag 1)
 #+END_SRC
*** Disable wrapping for long lines in display
 #+BEGIN_SRC emacs-lisp
   (setq-default truncate-lines t)
 #+END_SRC
** Advanced
*** Expand-region
 #+BEGIN_SRC emacs-lisp
 (use-package expand-region 
   :ensure t
   :bind 
   ("C-+" . er/expand-region)
   ("C--" . er/contract-region))
 #+END_SRC
*** Auto-completion
 #+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :init
     (add-hook 'after-init-hook 'global-company-mode)
     (setq company-idle-delay 0
           company-minimum-prefix-length 1
           company-selection-wrap-around 1
           company-tooltip-align-annotations 't)
     (company-tng-configure-default))
 #+END_SRC
*** Buffers
 #+BEGIN_SRC emacs-lisp
   (use-package ibuffer
     :ensure t
     :bind ("C-x C-b" . ibuffer))

   (use-package ibuffer-projectile
     :after ibuffer
     :preface
     (defun my/ibuffer-projectile ()
       (ibuffer-projectile-set-filter-groups)
       (unless (eq ibuffer-sorting-mode 'alphabetic)
         (ibuffer-do-sort-by-alphabetic)))
     :hook (ibuffer . my/ibuffer-projectile))

   (defvar *protected-buffers* '("*scratch*" "*Messages*")
     "Buffers that cannot be killed.")

   (defun my/protected-buffers ()
     "Protects some buffers from being killed."
     (dolist (buffer *protected-buffers*)
       (with-current-buffer buffer
         (emacs-lock-mode 'kill))))

   (add-hook 'after-init-hook #'my/protected-buffers)
 #+END_SRC
*** Toggle maximize on selected buffer
 #+BEGIN_SRC emacs-lisp
   (defun toggle-maximize-buffer () "Maximize buffer"
     (interactive)
     (if (= 1 (length (window-list)))
         (jump-to-register '_) 
       (progn
         (window-configuration-to-register '_)
         (delete-other-windows))))

   (define-key global-map (kbd "C-c f") 'toggle-maximize-buffer)
 #+END_SRC
*** Undo and Redo
 #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :ensure t
     :diminish undo-tree-mode
     :init
     (global-undo-tree-mode 1)
     :config
     (defalias 'redo 'undo-tree-redo)
     :bind (("C-z" . undo)
            ("C-S-z" . redo)))
 #+END_SRC
*** Windows
**** Don't prompt before killing buffer
 #+BEGIN_SRC emacs-lisp
   (global-set-key [remap kill-buffer] #'kill-this-buffer)
 #+END_SRC
**** Give focus to new buffer on creation
 #+BEGIN_SRC emacs-lisp
   (use-package window
     :ensure nil
     :bind (("C-x 3" . hsplit-last-buffer)
            ("C-x 2" . vsplit-last-buffer))
     :preface
     (defun hsplit-last-buffer ()
       "Gives the focus to the last created horizontal window."
       (interactive)
       (split-window-horizontally)
       (other-window 1))

     (defun vsplit-last-buffer ()
       "Gives the focus to the last created vertical window."
       (interactive)
       (split-window-vertically)
       (other-window 1)))
 #+END_SRC
**** switch-window
 #+BEGIN_SRC emacs-lisp
   (use-package switch-window
     :bind (("C-x o" . switch-window)
            ("C-x w" . switch-window-then-swap-buffer)))
 #+END_SRC
**** windmove
 #+BEGIN_SRC emacs-lisp
   (use-package windmove
     :bind (("C-c <left>" . windmove-left)
            ("C-c <down>" . windmove-down)
            ("C-c <up>" . windmove-up)
            ("C-c <right>" . windmove-right)))
 #+END_SRC
*** Add org-babel-tangle local variable to safe-list
#+BEGIN_SRC emacs-lisp
  (add-to-list 'safe-local-variable-values
               '(eval add-hook 'after-save-hook
                      (lambda () (org-babel-tangle nil nil "emacs-lisp"))
                      nil t))
#+END_SRC
** Registers
#+BEGIN_SRC emacs-lisp
  (set-register ?b '(file . "~/.bashrc"))
  (set-register ?c '(file . "~/.emacs.d/.config.org"))
#+END_SRC
* UI
** Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-vibrant 'no-confirm))
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+END_SRC

** Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Source Code Pro Medium")
(set-fontset-font t 'latin "Noto Sans")
#+END_SRC
* Modes
** Ido-mode
#+BEGIN_SRC emacs-lisp
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(ido-mode t)
#+END_SRC
** Org-mode
*** Org-bullets-mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** Shift select
#+BEGIN_SRC emacs-lisp
  (setq org-support-shift-select t)
#+END_SRC
*** Useful global keys
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC
*** Personal org-files
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c m c") (lambda() (interactive)(find-file "~/.emacs.d/config.org"))) ; config file
  (global-set-key (kbd "C-c m n") (lambda() (interactive)(find-file "~/.emacs.d/org-mode/org/notes.org"))) ; my notes
  (global-set-key (kbd "C-c m r") (lambda() (interactive)(find-file "~/.emacs.d/org-mode/org/reports.org"))) ; my reports
#+END_SRC
*** Getting things done
#+BEGIN_SRC emacs-lisp
  (setq org-tags-column 0)
 
  (global-set-key (kbd "<f5>") (lambda() (interactive)(find-file "~/.emacs.d/org-mode/org/gtd.org")))
  (global-set-key (kbd "<f6>") (lambda() (interactive)(find-file "~/.emacs.d/org-mode/org/inbox.org")))
  (global-set-key (kbd "<f7>") (lambda() (interactive)(find-file "~/.emacs.d/org-mode/org/tickler.org")))
  (global-set-key (kbd "<f8>") (lambda() (interactive)(find-file "~/.emacs.d/org-mode/org/someday.org")))


  (setq org-agenda-files '("~/.emacs.d/org-mode/org/gtd.org"
                           "~/.emacs.d/org-mode/org/inbox.org"
                           "~/.emacs.d/org-mode/org/tickler.org"))

  (setq org-refile-targets '(("~/.emacs.d/org-mode/org/gtd.org" :maxlevel . 3)
                             ("~/.emacs.d/org-mode/org/someday.org" :maxlevel . 1)
                             ("~/.emacs.d/org-mode/org/tickler.org" :maxlevel . 2)))

  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/.emacs.d/org-mode/org/inbox.org" "Tasks")
                                 "* TODO %i%?")
                                ("T" "Tickler" entry
                                 (file+headline "~/.emacs.d/org-mode/org/tickler.org" "Tickler")
                                 "* %i%? \n %U")))

  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC
*** Tags
#+BEGIN_SRC emacs-lisp
  ;; Documentation:  https://orgmode.org/org.html#Tags
  (setq org-tag-alist '((:startgroup . nil)
                        ("@work" . ?w) ("@home" . ?h)
                        (:endgroup . nil)))
#+END_SRC
** Markdown-mode
You need to install =pandoc= separately on your system for preview to work.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "/usr/bin/pandoc"))
#+END_SRC
** Lsp-mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode :hook ((lsp-mode . lsp-enable-which-key-integration))
    :ensure t
    :config (setq lsp-completion-enable-additional-text-edit nil))

  (use-package lsp-ui
    :ensure t)
#+END_SRC
** Dap-mode
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
#+END_SRC
* General packages
** Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	     :ensure t
	     :config(which-key-mode))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (progn
    (setq dashboard-items '((recents . 5)
			    (agenda . 5)
			    (projects . 5)
			    (bookmarks .5)))
    (setq dashboard-center-content nil)
    (setq dashboard-banner-logo-title "Wherever you go, there you are.")
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-startup-banner "~/.emacs.d/assets/images/emacs-logo.png")
    (setq show-week-agenda-p t)
    (setq dashboard-set-navigator t)
    (setq dashboard-navigator-buttons
	  `(
	    ((,nil
	      "config file"
	      "Open config file"
	      (lambda (&rest _) (find-file "~/.emacs.d/config.org"))
	      ))))
    )
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :bind
  (:map global-map
	([f9] . treemacs))
  :config
  (setq treemacs-show-hidden-files t)
  (setq treemacs-follow-mode t))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC
* Programming
** Lisp
*** SBCL & Quicklisp setup
#+BEGIN_SRC markdown
  Install the needed packages to use slime-helper by following these steps:

  1. Install SBCL
  2. Fetch quicklisp
  3. Load quicklisp into SBCL context

  ```sh
  sudo apt-get install sbcl
  curl -O http://beta.quicklisp.org/quicklisp.lisp
  sbcl --load quicklisp.lisp
  ```

  Step into SBCL context by typing `sbcl` in your terminal and setup quick-lisp:

  ```sh
  (quicklisp-quickstart:install)
  (ql:quickload "quicklisp-slime-helper")
  ```
#+END_SRC
*** Load slime-helper
#+BEGIN_SRC emacs-lisp
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq inferior-lisp-program "/usr/bin/sbcl")
#+END_SRC

#+BEGIN_SRC markdown
  You can run the Common Lisp REPL like this: `M-x slime`
#+END_SRC

** Java
*** Lsp-java
Press =[TAB]= and =[RET]= if language server prompts you when opening a =.Java= file.
Source: [[https://github.com/emacs-lsp/lsp-java][lsp-java]]
#+BEGIN_SRC emacs-lisp
  (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
#+END_SRC
*** Dap-java
#+BEGIN_SRC emacs-lisp
  (use-package dap-java :ensure nil)
#+END_SRC
* Local variables
Keep this at or near the end of the file: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html][Source]]
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle nil nil "emacs-lisp")) nil t)
# End:
